{"remainingRequest":"D:\\nodejs\\node_cache\\node_modules\\@vue\\cli-service-global\\node_modules\\_vue-loader@15.7.1@vue-loader\\lib\\index.js??vue-loader-options!D:\\workplace\\photo\\Puzzle.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workplace\\photo\\Puzzle.vue","mtime":1571106371816},{"path":"D:\\nodejs\\node_cache\\node_modules\\@vue\\cli-service-global\\node_modules\\_babel-loader@8.0.6@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\nodejs\\node_cache\\node_modules\\@vue\\cli-service-global\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\nodejs\\node_cache\\node_modules\\@vue\\cli-service-global\\node_modules\\_vue-loader@15.7.1@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    props: {\n        width: {\n            type: Number,\n            default: 500\n        },\n        height: {\n            type: Number,\n            default: 500\n        },\n        row: {\n            type: Number,\n            default: 3\n        },\n        col: {\n            type: Number,\n            default: 3\n        },\n        img: {\n            type: String,\n            required: true\n        }\n    },\n    computed: {\n        blockWidth () {\n          return this.width / this.col;\n        },\n        blockHeight () {\n            return this.height / this.row;\n        },\n        correctPoints () {\n            const { row, col, blockWidth, blockHeight } = this;\n            const arr = [];\n\n            for (let i = 0; i< row; i ++) {\n                for (let j = 0; j< col; j ++) {\n                    arr.push({\n                        x: j * blockWidth,\n                        y: i * blockHeight,\n                        id: new Date().getTime() + Math.random() * 100\n                    })\n                }\n            }\n            return arr;\n        },\n        blockPoints () {\n            const points = this.correctPoints;\n            const length = points.length;\n            const lastEle = points[length - 1];\n            const newArr = [...points];\n            newArr.length = length - 1;\n            newArr.sort(() => Math.random() - 0.5);\n            newArr.push(lastEle);\n\n            return newArr;\n\n        }\n    },\n    methods: {\n        handleClick (e) {\n            const blockDom = e.target;\n            const emptyDom = this.$refs.empty[0];\n\n            if (!this.isAdjacent(blockDom, emptyDom)) {\n                return;\n            }\n            const { left, top } = blockDom.style;\n\n            blockDom.style.left = emptyDom.style.left;\n            blockDom.style.top = emptyDom.style.top;\n            emptyDom.style.left = left;\n            emptyDom.style.top = top;\n            const  winFlag = this.checkWin();\n            if(winFlag) {\n                this.winGame(emptyDom);\n            }\n        },\n        isAdjacent (blockDom, emptyDom) {\n            const { left:blockLeft, top:blockTop, width, height } = blockDom.style;\n            const { left:emptyLeft, top:emptyTop } = emptyDom.style;\n            const xDis = Math.floor(Math.abs(parseFloat(blockLeft) - parseFloat(emptyLeft))); //Math.floor()取整\n            const yDis = Math.floor(Math.abs(parseFloat(blockTop) - parseFloat(emptyTop)));\n            const flag = (blockLeft === emptyLeft && yDis === parseInt(height))\n                            || (blockTop === emptyTop && xDis === parseInt(width));\n            return flag;\n        },\n        checkWin() {\n            const blockDomArr = this.$refs.block;\n            // every()全真才为真\n            return blockDomArr.every(dom => {\n                const { left: blockLeft, top: blockTop } = dom.style;\n                const { correctx: correctX, correcty: correctY } = dom.dataset;\n                const  flag = parseInt(blockLeft) === parseInt(correctX) && parseInt(blockTop) === parseInt(correctY);\n                return flag;\n            })\n        },\n        winGame (emptyDom) {\n            setTimeout(() => {\n                alert('宗介！');\n                emptyDom.style.opacity = 1;\n               setTimeout(() => {\n                   this.goToNextLevel();\n               }, 300)\n            }, 300)\n        },\n        goToNextLevel () {\n            const answerFlag = window.confirm('要继续下一关吗？')\n            if(answerFlag) {\n                this.$emit('next');\n            }\n        }\n    }\n}\n",{"version":3,"sources":["Puzzle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Puzzle.vue","sourceRoot":".","sourcesContent":["<template>\r\n    <div class=\"puzzle\" :style=\"{width: width + 'px', height: height + 'px'}\">\r\n        <div\r\n                class=\"puzzle__block\"\r\n                v-for=\"(item, index) in blockPoints\"\r\n                :key=\"item.id\"\r\n                :style=\"{\r\n                    width: blockWidth + 'px',\r\n                    height: blockHeight + 'px',\r\n                    left: item.x+'px',\r\n                    top: item.y+'px',\r\n                    backgroundImage: `url(${img})`,\r\n                    backgroundPosition: `-${correctPoints[index].x}px -${correctPoints[index].y}px`,\r\n                    opacity: index === blockPoints.length - 1 && 0\r\n                }\"\r\n                @click=\"handleClick\"\r\n                :ref=\"index === blockPoints.length - 1  ? 'empty' : 'block'\"\r\n                :data-correctX=\"correctPoints[index].x\"\r\n                :data-correctY=\"correctPoints[index].y\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: {\r\n            width: {\r\n                type: Number,\r\n                default: 500\r\n            },\r\n            height: {\r\n                type: Number,\r\n                default: 500\r\n            },\r\n            row: {\r\n                type: Number,\r\n                default: 3\r\n            },\r\n            col: {\r\n                type: Number,\r\n                default: 3\r\n            },\r\n            img: {\r\n                type: String,\r\n                required: true\r\n            }\r\n        },\r\n        computed: {\r\n            blockWidth () {\r\n              return this.width / this.col;\r\n            },\r\n            blockHeight () {\r\n                return this.height / this.row;\r\n            },\r\n            correctPoints () {\r\n                const { row, col, blockWidth, blockHeight } = this;\r\n                const arr = [];\r\n\r\n                for (let i = 0; i< row; i ++) {\r\n                    for (let j = 0; j< col; j ++) {\r\n                        arr.push({\r\n                            x: j * blockWidth,\r\n                            y: i * blockHeight,\r\n                            id: new Date().getTime() + Math.random() * 100\r\n                        })\r\n                    }\r\n                }\r\n                return arr;\r\n            },\r\n            blockPoints () {\r\n                const points = this.correctPoints;\r\n                const length = points.length;\r\n                const lastEle = points[length - 1];\r\n                const newArr = [...points];\r\n                newArr.length = length - 1;\r\n                newArr.sort(() => Math.random() - 0.5);\r\n                newArr.push(lastEle);\r\n\r\n                return newArr;\r\n\r\n            }\r\n        },\r\n        methods: {\r\n            handleClick (e) {\r\n                const blockDom = e.target;\r\n                const emptyDom = this.$refs.empty[0];\r\n\r\n                if (!this.isAdjacent(blockDom, emptyDom)) {\r\n                    return;\r\n                }\r\n                const { left, top } = blockDom.style;\r\n\r\n                blockDom.style.left = emptyDom.style.left;\r\n                blockDom.style.top = emptyDom.style.top;\r\n                emptyDom.style.left = left;\r\n                emptyDom.style.top = top;\r\n                const  winFlag = this.checkWin();\r\n                if(winFlag) {\r\n                    this.winGame(emptyDom);\r\n                }\r\n            },\r\n            isAdjacent (blockDom, emptyDom) {\r\n                const { left:blockLeft, top:blockTop, width, height } = blockDom.style;\r\n                const { left:emptyLeft, top:emptyTop } = emptyDom.style;\r\n                const xDis = Math.floor(Math.abs(parseFloat(blockLeft) - parseFloat(emptyLeft))); //Math.floor()取整\r\n                const yDis = Math.floor(Math.abs(parseFloat(blockTop) - parseFloat(emptyTop)));\r\n                const flag = (blockLeft === emptyLeft && yDis === parseInt(height))\r\n                                || (blockTop === emptyTop && xDis === parseInt(width));\r\n                return flag;\r\n            },\r\n            checkWin() {\r\n                const blockDomArr = this.$refs.block;\r\n                // every()全真才为真\r\n                return blockDomArr.every(dom => {\r\n                    const { left: blockLeft, top: blockTop } = dom.style;\r\n                    const { correctx: correctX, correcty: correctY } = dom.dataset;\r\n                    const  flag = parseInt(blockLeft) === parseInt(correctX) && parseInt(blockTop) === parseInt(correctY);\r\n                    return flag;\r\n                })\r\n            },\r\n            winGame (emptyDom) {\r\n                setTimeout(() => {\r\n                    alert('宗介！');\r\n                    emptyDom.style.opacity = 1;\r\n                   setTimeout(() => {\r\n                       this.goToNextLevel();\r\n                   }, 300)\r\n                }, 300)\r\n            },\r\n            goToNextLevel () {\r\n                const answerFlag = window.confirm('要继续下一关吗？')\r\n                if(answerFlag) {\r\n                    this.$emit('next');\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .puzzle {\r\n        position: relative;\r\n        border: 2px solid #ccc;\r\n    }\r\n    .puzzle__block {\r\n        box-sizing: border-box;\r\n        position: absolute;\r\n        border: 1px solid #fff;\r\n        transition: all .3s;\r\n    }\r\n</style>"]}]}